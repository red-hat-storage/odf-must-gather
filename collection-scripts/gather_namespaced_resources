#!/usr/bin/env bash

# Expect base collection path as an exported variable
# If it is not defined, use PWD instead
BASE_COLLECTION_PATH=${BASE_COLLECTION_PATH:-"$(pwd)"}

# Make a global variable for namespace
INSTALL_NAMESPACES=$(oc get storagecluster -A --no-headers | awk '{print $1}')
PRODUCT_NAMESPACE=$(oc get managedFusionOffering -A --no-headers | awk '{print $1}')
OPERATOR_NAMESPACE=$(oc get subscription -A --no-headers | awk '{print $1}' | grep odf-operator)
MANAGED_FUSION_NAMESPACE=$(oc get secrets -A --no-headers | grep managed-fusion-agent-config | awk '{print $1}')

# Add general resources to list if necessary

# Resource List
resources=()
# collect storagecluster resources

# TODO: Re enable the collection of storagecluster via inspect command
# resources+=(storageclusters)
# resources+=(storagesystem)

# collect OB/OBC resources
resources+=(objectbuckets)

# collection path for OC commands
mkdir -p "${BASE_COLLECTION_PATH}/oc_output/"

# Command List
commands_get=()

# collect oc output of OC get commands
commands_get+=("subscription")
commands_get+=("csv")
commands_get+=("catalogsource")
commands_get+=("installplan")
commands_get+=("all -o wide")
commands_get+=("role")
commands_get+=("hpa")
commands_get+=("secrets")
commands_get+=("configmap")
commands_get+=("rolebinding")
commands_get+=("storageconsumer")
commands_get+=("storageprofiles")
commands_get+=("storagerequest")
commands_get+=("alertmanager")
commands_get+=("alertmanagerconfig")
commands_get+=("prometheus")
commands_get+=("cephfilesystemsubvolumegroups.ceph.rook.io")

# collect oc output of OC desc commands
commands_desc=()
commands_desc+=("pods")
commands_desc+=("hpa")
commands_desc+=("subscription")
commands_desc+=("storagecluster")
commands_desc+=("storagesystem")
commands_desc+=("storageconsumer")
commands_desc+=("storageprofiles")
commands_desc+=("storagerequest")
commands_desc+=("alertmanager")
commands_desc+=("prometheus")
commands_desc+=("alertmanagerconfig")
commands_desc+=("cephfilesystemsubvolumegroups.ceph.rook.io")

# collect yaml output of OC commands
oc_yamls=()
oc_yamls+=("csv")
oc_yamls+=("hpa")
oc_yamls+=("subscription")
oc_yamls+=("installplan")
oc_yamls+=("storagerequest")
oc_yamls+=("alertmanager")
oc_yamls+=("prometheus")
oc_yamls+=("alertmanagerconfig")
oc_yamls+=("recipe")

# collect get output of OC commands for all namespaces
oc_get_all=()
oc_get_all+=("pvc")
oc_get_all+=("volumesnapshot")
oc_get_all+=("volumegroupnapshot")
oc_get_all+=("obc")
oc_get_all+=("volumereplication")
oc_get_all+=("volumereplicationgroups")
oc_get_all+=("csiaddonsnode")
oc_get_all+=("storageclaim")
oc_get_all+=("managedfusionoffering")
oc_get_all+=("reclaimspacejob")
oc_get_all+=("reclaimspacecronjobs")
oc_get_all+=("network-attachment-definitions")
oc_get_all+=("encryptionkeyrotationjob")
oc_get_all+=("encryptionkeyrotationcronjob")
oc_get_all+=("operatorconfigs.csi.ceph.io")
oc_get_all+=("drivers.csi.ceph.io")
oc_get_all+=("cephconnections.csi.ceph.io")
oc_get_all+=("clientprofiles.csi.ceph.io")
oc_get_all+=("clientprofilemappings.csi.ceph.io")
oc_get_all+=("recipe.ramendr.openshift.io")

for INSTALL_NAMESPACE in $PRODUCT_NAMESPACE $INSTALL_NAMESPACES $MANAGED_FUSION_NAMESPACE $OPERATOR_NAMESPACE; do
     dbglog "collecting dump of namespace ${INSTALL_NAMESPACE}"
     { oc adm inspect --dest-dir="${BASE_COLLECTION_PATH}" ${LOG_FILTER_ARGS:+"${LOG_FILTER_ARGS}"} ns/"${INSTALL_NAMESPACE}" 2>&1; } | dbglog
     dbglog "collecting dump of clusterresourceversion"
     for oc_yaml in "${oc_yamls[@]}"; do
          # shellcheck disable=SC2129
          { oc adm inspect -n "${INSTALL_NAMESPACE}" --dest-dir="${BASE_COLLECTION_PATH}" ${LOG_FILTER_ARGS:+"${LOG_FILTER_ARGS}"} "${oc_yaml}" 2>&1; } | dbglog
     done

     # Create the dir for oc_output
     mkdir -p "${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/"

     # Run the Collection of Resources to list
     for command_get in "${commands_get[@]}"; do
          dbglog "collecting oc command ${command_get}"
          COMMAND_OUTPUT_FILE=${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/${command_get// /_}
          # shellcheck disable=SC2086
          { oc get ${command_get} -n ${INSTALL_NAMESPACE}; } >>"${COMMAND_OUTPUT_FILE}"
     done

     # Run the Collection of OC desc commands
     for command_desc in "${commands_desc[@]}"; do
          dbglog "collecting oc describe command ${command_desc}"
          COMMAND_OUTPUT_FILE=${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/${command_desc// /_}
          # shellcheck disable=SC2086
          { oc describe ${command_desc} -n ${INSTALL_NAMESPACE}; } >>"${COMMAND_OUTPUT_FILE}"
     done
     # NOTE: This is a temporary fix for collecting the storagecluster as we are not able to collect the storagecluster using the inspect command
     { oc get storageclusters -n "${INSTALL_NAMESPACE}" -o yaml; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/storagecluster.yaml" 2>&1
     { oc get storagesystem -n "${INSTALL_NAMESPACE}" -o yaml; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/storagesystem.yaml" 2>&1
     { oc get storageconsumer -n "${INSTALL_NAMESPACE}" -o yaml; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/storageconsumer.yaml" 2>&1
     { oc get secret rook-ceph-external-cluster-details -n "${INSTALL_NAMESPACE}" -o jsonpath='{.data.external_cluster_details}' | base64 --decode | sed -E 's/("\w+Key":\s*)"[A-Za-z0-9+/=]+"/\1"REDACTED"/g'; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/external_cluster_details.json" 2>&1
done

# Collect oc get events with sorted timestamp
dbglog "collecting output of oc get events with sorted timestamp"
{ oc get event -o custom-columns="LAST SEEN:{lastTimestamp},FIRST SEEN:{firstTimestamp},COUNT:{count},NAME:{metadata.name},KIND:{involvedObject.kind},SUBOBJECT:{involvedObject.fieldPath},TYPE:{type},REASON:{reason},SOURCE:{source.component},MESSAGE:{message}" --sort-by=lastTimestamp -n openshift-storage; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/events_get" 2>&1
events=$(timeout 60 oc get events -n openshift-storage -o custom-columns="NAME:{metadata.name}" --sort-by=lastTimestamp --no-headers)
for event in $events; do
     { oc describe events "${event}" -n openshift-storage; } >>"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/events_desc"
     { oc get events "${event}" -n openshift-storage -o yaml; } >>"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/events_yaml"
done

# Create the dir for data from all namespaces
mkdir -p "${BASE_COLLECTION_PATH}/namespaces/all/"

# Run the Collection of Resources using must-gather
for resource in "${resources[@]}"; do
     dbglog "collecting dump of ${resource}"
     { oc adm inspect --all-namespaces --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" ${LOG_FILTER_ARGS:+"${LOG_FILTER_ARGS}"} "${resource}" 2>&1; } | dbglog
done

# Run the Collection of oc_get_all
for oc_get in "${oc_get_all[@]}"; do
     dbglog "collecting oc get command ${oc_get}"
     COMMAND_OUTPUT_FILE=${BASE_COLLECTION_PATH}/namespaces/all/${oc_get// /_}
     # shellcheck disable=SC2086
     { oc get "${oc_get}" --all-namespaces; } >>"${COMMAND_OUTPUT_FILE}"
     dbglog "collecting oc describe command ${oc_get}"
     COMMAND_OUTPUT_FILE=${BASE_COLLECTION_PATH}/namespaces/all/${oc_get// /_}
     # shellcheck disable=SC2086
     { oc describe "${oc_get}" --all-namespaces; } >>"${COMMAND_OUTPUT_FILE}"
     { oc adm inspect --all-namespaces --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" ${LOG_FILTER_ARGS:+"${LOG_FILTER_ARGS}"} "${oc_get}" 2>&1; } | dbglog
     { oc get "${oc_get}" -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/${oc_get// /_}"
done
