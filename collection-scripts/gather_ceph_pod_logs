#!/usr/bin/env bash

# Expect base collection path as an exported variable
# If it is not defined, use PWD instead
BASE_COLLECTION_PATH=${BASE_COLLECTION_PATH:-"$(pwd)"}

namespace=$(oc get deploy --all-namespaces -o go-template --template='{{range .items}}{{if .metadata.labels}}{{printf "%s %v" .metadata.namespace (index .metadata.labels "olm.owner")}} {{printf "\n"}}{{end}}{{end}}' | grep -E 'ocs-operator|ocs-client-operator' | awk '{print $1}' | uniq)
# Check if the storagecluster CRD exists
# Running the `oc get storagecluster` command directly throws error:
# `error: the server doesn't have a resource type "storagecluster"`
CRD_EXISTS=$(oc get crd | grep -c "storageclusters.ocs.openshift.io")
if [ "$CRD_EXISTS" -eq 0 ]; then
    dbglog "storagecluster CRD not found. Skipping CRD-specific logic."
    storageClusterPresent=""
    reconcileStrategy=""
    externalStorageClusterPresent=""
else
    # Only proceed if CRD is present
    # storing storagecluster name
    storageClusterPresent=$(oc get storageclusters.ocs.openshift.io -n "${namespace}" -o go-template='{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' 2>/dev/null)
    # checking for mcg standalone cluster
    reconcileStrategy=$(oc get storageclusters.ocs.openshift.io -n "${namespace}" -o go-template='{{range .items}}{{.spec.multiCloudGateway.reconcileStrategy}}{{"\n"}}{{end}}' 2>/dev/null)
    externalStorageClusterPresent=$(oc get storageclusters.ocs.openshift.io -n "${namespace}" -o go-template='{{range .items}}{{.spec.externalStorage.enable}}{{"\n"}}{{end}}' 2>/dev/null)
fi

if [ "${externalStorageClusterPresent}" = "true" ]; then
    dbglog "Collecting limited ceph logs since external cluster is present"
    gather_common_ceph_resources "${BASE_COLLECTION_PATH}"
elif [ -z "${storageClusterPresent}" ]; then
    dbglog "Skipping ceph collection as Storage Cluster is not present"
elif [ "${reconcileStrategy}" = "standalone" ]; then
    dbglog "Skipping ceph collection as this is a MCG only cluster"
else
    dbglog "Collecting entire ceph logs"
    gather_ceph_resources "${BASE_COLLECTION_PATH}"
fi
