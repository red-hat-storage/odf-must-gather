#!/usr/bin/env bash

# Expect base collection path as an exported variable
# If it is not defined, use PWD instead
BASE_COLLECTION_PATH=${BASE_COLLECTION_PATH:-"$(pwd)"}

# Make a global variable for namespace
INSTALL_NAMESPACE=$(oc get csv -A | grep odf-operator | awk '{print $1}')

NOOBAA_COLLLECTION_PATH="${BASE_COLLECTION_PATH}/noobaa"
mkdir -p "${NOOBAA_COLLLECTION_PATH}"

noobaa_resources=()

noobaa_resources+=(noobaa)
noobaa_resources+=(backingstore)
noobaa_resources+=(namespacestore)
noobaa_resources+=(bucketclass)
noobaa_resources+=(obc)
noobaa_resources+=(ob)

noobaa_cli=()
noobaa_cli+=("status")
noobaa_cli+=("obc list")

noobaa_desc=()
noobaa_desc+=("pod noobaa-db-pg-0")
noobaa_desc+=("statefulset.apps noobaa-db-pg")

cp_noobaa_cli "$INSTALL_NAMESPACE"

# Bail out early if noobaa CLI is not present
if [ ! -f /usr/bin/noobaa ]; then
  echo "FATAL: failed to locate noobaa CLI"

  exit 1
fi

mkdir -p "${NOOBAA_COLLLECTION_PATH}/raw_output/}"

# Save the information of all Postgres DBs in the NooBaa DB pod
dbglog "Collecting MCG database information..."
oc rsh --namespace "${INSTALL_NAMESPACE}" noobaa-db-pg-0 psql -d nbcore -c '\pset pager off' -c '\list+' -c '\dt+' &>"${NOOBAA_COLLLECTION_PATH}"/raw_output/db_list.txt 2>&1

# Run the Collection of Noobaa cli using must-gather
# shellcheck disable=SC2086
for cli in "${noobaa_cli[@]}"; do
    dbglog "collecting dump of ${cli}"
    COMMAND_OUTPUT_FILE="${NOOBAA_COLLLECTION_PATH}"/raw_output/${cli// /_}
    { timeout 180 noobaa ${cli} --namespace "${INSTALL_NAMESPACE}" >>"${COMMAND_OUTPUT_FILE}"; } >>"${BASE_COLLECTION_PATH}"/gather-debug.log 2>&1
done
noobaa diagnose --dir "${NOOBAA_COLLLECTION_PATH}"/raw_output/ --namespace "${INSTALL_NAMESPACE}" >>"${BASE_COLLECTION_PATH}"/gather-debug.log 2>&1

# Run the Collection of NooBaa Resources using must-gather
for resource in "${noobaa_resources[@]}"; do
    dbglog "collecting dump of ${resource}"
    { oc adm inspect --all-namespaces --dest-dir="${NOOBAA_COLLLECTION_PATH}" ${LOG_FILTER_ARGS:+"${LOG_FILTER_ARGS}"} "${resource}"; } >>"${BASE_COLLECTION_PATH}"/gather-debug.log 2>&1
done

# Collect logs for all noobaa pods using oc logs
# get all namespaces that contain any noobaa pod
NOOBAA_PODS_LABEL='app in (noobaa)'
for ns in $(oc get pod --all-namespaces -l "${NOOBAA_PODS_LABEL}" | grep -v NAMESPACE | awk '{print $1}' | uniq); do
    #get logs for all pods with label app=noobaa
    for pod in $(oc -n "${ns}" get pod -l "${NOOBAA_PODS_LABEL}" | grep -v NAME | awk '{print $1}'); do
        dbglog "collecting dump of ${pod} pod from ${ns}"
        LOG_DIR=${NOOBAA_COLLLECTION_PATH}/logs/${ns}
        mkdir -p "${LOG_DIR}"
        { timeout 120 oc -n "${ns}" logs --all-containers "${pod}" &>"${LOG_DIR}"/"${pod}".log; } >>"${BASE_COLLECTION_PATH}"/gather-debug.log 2>&1
    done
done

# Collecting noobaa db pod logs with postgres label
NOOBAA_POSTGRES_LABEL='noobaa-db in (postgres)'
for pod in $(oc -n "${ns}" get pods -l "${NOOBAA_POSTGRES_LABEL}" | grep -v NAME | awk '{print $1}'); do
    dbglog "collecting noobaa db pod logs from ${ns}"
    { timeout 120 oc -n "${ns}" logs --all-containers "${pod}" &>"${LOG_DIR}"/"${pod}".log; } >>"${BASE_COLLECTION_PATH}"/gather-debug.log 2>&1
    { timeout 120 oc -n "${ns}" cp "${pod}":/var/lib/pgsql/data/userdata/log "${LOG_DIR}"/"${pod}"/pg_log; } >>"${BASE_COLLECTION_PATH}"/gather-debug.log 2>&1
done

# Add important notifications to a notifications.txt file at the root of the noobaa collection path
UNMANAGED_NOOBAA_NOTIF="The noobaa deployed on this cluster is not managed by the storagecluster CR and will not react to configuration changes made to storagecluster CR"

NOOBAA_RECONCILE_STRATEGY=$(oc -n "${ns}" get storagecluster -o jsonpath='{.items[0].spec.multiCloudGateway.reconcileStrategy}' 2>/dev/null)
if [ "${NOOBAA_RECONCILE_STRATEGY}" = "ignore" ] || [ "${NOOBAA_RECONCILE_STRATEGY}" = "standalone" ]; then
    if [ "$(oc -n "${ns}" get noobaa -o name 2>/dev/null)" ]; then
        echo "- ${UNMANAGED_NOOBAA_NOTIF}" >>"${NOOBAA_COLLLECTION_PATH}/notifications.txt"
    fi
fi

# Create the dir for oc_output
mkdir -p "${NOOBAA_COLLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/"

# Run the Collection of OC desc commands for noobaa
for noobaa_desc in "${noobaa_desc[@]}"; do
    dbglog "collecting oc describe command ${noobaa_desc}"
    COMMAND_OUTPUT_FILE=${NOOBAA_COLLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/${noobaa_desc// /_}
    # shellcheck disable=SC2086
    { oc describe ${noobaa_desc} -n ${INSTALL_NAMESPACE}; } >>"${COMMAND_OUTPUT_FILE}"
done
