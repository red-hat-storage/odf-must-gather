#!/usr/bin/env bash

# Predefined operating modes
odf=false
dr=false
pc=false
noobaa=false
ceph=false
cephlogs=false
namespaced=false
clusterscoped=false
help=false
default=true
minimal=false

# Store PIDs of all the subprocesses
pids=()

while [[ $# -gt 0 ]]; do
    case "$1" in
    -o | --odf)
        odf=true
        default=false
        shift
        ;;
    -d | --dr)
        dr=true
        default=false
        shift
        ;;
    -pc | --provider*)
        pc=true
        default=false
        shift
        ;;
    -n | --noobaa)
        noobaa=true
        default=false
        shift
        ;;
    -c | --ceph)
        ceph=true
        default=false
        shift
        ;;
    -cl | --ceph-logs)
        cephlogs=true
        default=false
        shift
        ;;
    -ns | --namespaced)
        namespaced=true
        default=false
        shift
        ;;
    -cs | --clusterscoped)
        clusterscoped=true
        default=false
        shift
        ;;
    -m | --minimal)
        minimal=true
        default=false
        shift
        ;;
    -h | --help)
        help=true
        default=false
        shift
        ;;
    *)
        # Break the loop if the argument doesn't start with -
        # If it starts with a - and didn't match above
        # it is an unsupported option and we error out.
        if [[ "$1" == -* ]]; then
            # Invalid/unsupported arg
            echo "Error: Unknown option $1. See help, $ $0 -h." >&2
            exit 1
        else
            # Didn't start with -, not our business
            # breaking here helps preserve additional args
            break
        fi
        ;;
    esac
done

# Function to print help
display_help() {
    cat <<EOF
Usage: $0 [OPTIONS]

Options:
  -o,  --odf                Collect ODF logs
  -d,  --dr                 Collect DR logs
  -pc, --provider           Collect openshift-storage-client logs from a provider/consumer cluster
  -n,  --noobaa             Collect noobaa logs
  -c,  --ceph               Collect ceph commands and pod logs
  -cl, --ceph-logs          Collect ceph daemon, kernel, journal logs and crash reports
  -ns, --namespaced         Collect namespaced resources
  -cs, --clusterscoped      Collect clusterscoped resources
  -m,  --minimal            Collect storagecluster, cephcluster CRDs and operator CSVs
  -h,  --help               Print this help message

Description:
  ODF must-gather can run in modular mode and can collect JUST
  the resources you require to collect. You can use the args
  listed above to achieve that. If no arg is supplied the script
  will run in FULL collection mode and will gather all the resources
  from your cluster. This might take longer on some environments.

Note: Provide each arg separately and do not chain them like:
  $ oc adm must-gather --image=<odf-must-gather-image> -- $0  -dpnc          # Wrong
  $ oc adm must-gather --image=<odf-must-gather-image> -- $0  -d -p -n -c    # Correct

Examples:
  $ oc adm must-gather --image=<odf-must-gather-image> -- $0 -d -n --ceph    # Collect DR, noobaa and ceph logs only.
  $ oc adm must-gather --image=<odf-must-gather-image> -- $0 -h              # Print help
EOF
}

# If help is requested, we print it out and do nothing else (exit 0)
if [ "$help" = true ]; then
    display_help && exit 0
fi

export BASE_COLLECTION_PATH="must-gather"
mkdir -p ${BASE_COLLECTION_PATH}

# Source the utils
# shellcheck disable=SC1091
. utils.sh

# Parse the ENV for collection filters
parse_since_time

# Print and export must-gather pod details
export_pod_image_details

if [ -n "${LOG_FILTER_ARGS:-}" ]; then
    dbglog "Logs will be filtered using: ${LOG_FILTER_ARGS}"
fi

# Call pre-install.sh, see commit msg
pre-install.sh ${BASE_COLLECTION_PATH}

# timestamp for starting of the script
START_TIME=$(date +%r)
start=$(date +%s)
dbglog "collection started at: ${START_TIME}"

# Process the options
if [ "$odf" == true ]; then
    echo "Collect ODF logs..."
    gather_ceph_pod_logs ${BASE_COLLECTION_PATH} &
    pids+=($!)
    gather_ceph_logs &
    pids+=($!)
    gather_namespaced_resources &
    pids+=($!)
    gather_clusterscoped_resources &
    pids+=($!)
fi

if [ "$dr" == true ]; then
    echo "Collect DR logs..."
    gather_dr_resources ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

if [ "$pc" == true ]; then
    echo "Collect Provider/Consumer logs..."
    gather_odf_client ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

if [ "$noobaa" == true ]; then
    echo "Collect noobaa logs..."
    gather_noobaa_resources ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

if [ "$ceph" == true ] && [ "$odf" == false ]; then
    echo "Collect ceph pod logs..."
    gather_ceph_pod_logs &
    pids+=($!)
fi

if [ "$cephlogs" == true ] && [ "$odf" == false ]; then
    echo "Collect ceph daemon logs..."
    gather_ceph_logs ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

if [ "$namespaced" == true ] && [ "$odf" == false ]; then
    echo "Collect namespaced logs..."
    gather_namespaced_resources ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

if [ "$clusterscoped" == true ] && [ "$odf" == false ]; then
    echo "Collect clusterscoped logs..."
    gather_clusterscoped_resources ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

if [ "$minimal" == true ]; then
    echo "Collect minimal resource files..."
    gather_minimal_resources ${BASE_COLLECTION_PATH} &
    pids+=($!)
fi

# Preserve the functionality to accept and forward other args
# This is unused as of now but is there, just in case :)
if [ $# -gt 0 ]; then
    # Normally we'll bootstrap the default gather process here
    # and pass along the remaining args as is.
    # Case where user has not specified any args and the mg should run
    # in normal operating mode
    gather_main "$@"
fi

# No args, normal op mode
if [ "$default" = true ]; then
    # TODO: Add warning helptext here
    echo "No args detected, must-gather will start in default op mode"
    gather_main
fi

# Check if PID array has any values, if so, wait for them to finish
if [ ${#pids[@]} -ne 0 ]; then
    echo "Waiting on subprocesses to finish execution."
    wait "${pids[@]}"
fi

# Call post-uninstall.sh
post-uninstall.sh

# timestamp for ending of the script
END_TIME=$(date +%r)
end=$(date +%s)
totalTime=$((end - start))
{
    printf "total time taken by collection was %s seconds \n" ${totalTime}
    printf "collection ended at: %s \n" "${END_TIME}"
    echo "deleting empty files..."

} >>${BASE_COLLECTION_PATH}/gather-debug.log 2>&1
find "${BASE_COLLECTION_PATH}" -type f \( -empty -o -size 1c \) -print -delete >>${BASE_COLLECTION_PATH}/gather-debug.log 2>&1
exit 0
