#!/usr/bin/env bash

# Predefined operating modes
dr=false
pc=false
nooba=false
ceph=false
cephlogs=false
namespaced=false
clusterscoped=false
help=false
default=true

while [[ $# -gt 0 ]]; do
    case "$1" in
    -d | --dr)
        dr=true
        default=false
        shift
        ;;
    -p | --provider*)
        pc=true
        default=false
        shift
        ;;
    -n | --nooba)
        nooba=true
        default=false
        shift
        ;;
    -c | --ceph)
        ceph=true
        default=false
        shift
        ;;
    -cl | --ceph-logs)
        cephlogs=true
        default=false
        shift
        ;;
    -ns | --namespaced)
        namespaced=true
        default=false
        shift
        ;;
    -cs | --clusterscoped)
        clusterscoped=true
        default=false
        shift
        ;;
    -h | --help)
        help=true
        default=false
        shift
        ;;
    *)
        # Break the loop if the argument doesn't start with -
        # If it starts with a - and didn't match above
        # it is an unsupported option and we error out.
        if [[ "$1" == -* ]]; then
            # Invalid/unsupported arg
            echo "Error: Unknown option $1. See help, $ $0 -h." >&2
            exit 1
        else
            # Didn't start with -, not our business
            # breaking here helps preserve additional args
            break
        fi
        ;;
    esac
done

# Function to print help
display_help() {
    cat <<EOF
Usage: $0 [OPTIONS]

Options:
  -d,  --dr                 Collect DR logs
  -p,  --provider           Collect logs for provider/consumer cluster
  -n,  --nooba              Collect nooba logs
  -c,  --ceph               Collect ceph commands and pod logs
  -cl, --ceph-logs          Collect ceph daemon, kernel, journal logs and crash reports
  -ns, --namespaced         Collect namespaced resources
  -cs, --clusterscoped      Collect clusterscoped resources
  -h,  --help               Print this help message

Description:
  ODF must-gather can run in modular mode and can collect JUST
  the resources you require to collect. You can use the args
  listed above to achieve that. If no arg is supplied the script
  will run in FULL collection mode and will gather all the resources
  from your cluster. This might take longer on some environments.

  Note: Provide each arg separately and do not chain them like:
        $ $0 -dpnc          # Wrong
        $ $0 -d -p -n -c    # Correct

Examples:
  $ $0 -d -n --ceph         # Collect DR, nooba and ceph logs only.
  $ $0 -h                   # Print help
EOF
}

# If help is requested, we print it out and do nothing else (exit 0)
if [ "$help" = true ]; then
    display_help && exit 0
fi

# Process the options
if [ "$dr" == true ]; then
    # TODO: Add impl here
    echo "Collect DR logs..."
fi

if [ "$pc" == true ]; then
    # TODO: Add impl here
    echo "Collect Provider/Consumer logs..."
fi

if [ "$nooba" == true ]; then
    # TODO: Add impl here
    echo "Collect Nooba logs..."
fi

if [ "$ceph" == true ]; then
    # TODO: Add impl here
    echo "Collect ceph pod logs..."
fi

if [ "$cephlogs" == true ]; then
    # TODO: Add impl here
    echo "Collect ceph daemon logs..."
fi

if [ "$namespaced" == true ]; then
    # TODO: Add impl here
    echo "Collect namespaced logs..."
fi

if [ "$clusterscoped" == true ]; then
    # TODO: Add impl here
    echo "Collect clusterscoped logs..."
fi

# Preserve the functionality to accept and forward other args
# This is unused as of now but is there, just in case :)
if [ $# -gt 0 ]; then
    # Normally we'll bootstrap the default gather process here
    # and pass along the remaining args as is.
    # Case where user has not specified any args and the mg should run
    # in normal operating mode
    gather_main "$@"
fi

# No args, normal op mode
if [ "$default" = true ]; then
    echo "Gather will start in default op mode"
    gather_main
fi
